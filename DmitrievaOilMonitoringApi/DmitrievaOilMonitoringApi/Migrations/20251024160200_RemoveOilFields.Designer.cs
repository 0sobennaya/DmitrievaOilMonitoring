// <auto-generated />
using System;
using DmitrievaOilMonitoringApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DmitrievaOilMonitoringApi.Migrations
{
    [DbContext(typeof(OilMonitoringApiContext))]
    [Migration("20251024160200_RemoveOilFields")]
    partial class RemoveOilFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DmitrievaOilMonitoringApi.Models.Oil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OperatingHours")
                        .HasColumnType("float");

                    b.Property<int>("StartStopCycles")
                        .HasColumnType("int");

                    b.Property<double>("TAN")
                        .HasColumnType("float");

                    b.Property<double>("Viscosity")
                        .HasColumnType("float");

                    b.Property<double>("WaterContent")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Oils");
                });

            modelBuilder.Entity("DmitrievaOilMonitoringApi.Models.Pump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<int?>("OilId")
                        .HasColumnType("int");

                    b.Property<double>("OilLevel")
                        .HasColumnType("float");

                    b.Property<double>("OilPressure")
                        .HasColumnType("float");

                    b.Property<double>("OilTemperature")
                        .HasColumnType("float");

                    b.Property<double>("Power")
                        .HasColumnType("float");

                    b.Property<double>("PressureIn")
                        .HasColumnType("float");

                    b.Property<double>("PressureOut")
                        .HasColumnType("float");

                    b.Property<double>("ShaftRotationFrequency")
                        .HasColumnType("float");

                    b.Property<double>("TemperatureBearing")
                        .HasColumnType("float");

                    b.Property<double>("TemperatureBody")
                        .HasColumnType("float");

                    b.Property<double>("Vibration")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OilId")
                        .IsUnique()
                        .HasFilter("[OilId] IS NOT NULL");

                    b.ToTable("Pumps");
                });

            modelBuilder.Entity("DmitrievaOilMonitoringApi.Models.Pump", b =>
                {
                    b.HasOne("DmitrievaOilMonitoringApi.Models.Oil", "Oil")
                        .WithOne()
                        .HasForeignKey("DmitrievaOilMonitoringApi.Models.Pump", "OilId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Oil");
                });
#pragma warning restore 612, 618
        }
    }
}
